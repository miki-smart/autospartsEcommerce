apiVersion: apps/v1
kind: Deployment
metadata:
  name: identity-api
  namespace: autoparts-production
  labels:
    app: identity-api
    tier: api
spec:
  replicas: 3
  selector:
    matchLabels:
      app: identity-api
  template:
    metadata:
      labels:
        app: identity-api
        tier: api
    spec:
      containers:
      - name: identity-api
        image: ghcr.io/autoparts/identity:latest
        ports:
        - containerPort: 80
        env:
        - name: ASPNETCORE_URLS
          value: "http://+:80"
        - name: ConnectionStrings__DefaultConnection
          value: "Host=postgres;Database=IdentityDb;Username=postgres;Password=123456"
        envFrom:
        - configMapRef:
            name: autoparts-config
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        readinessProbe:
          httpGet:
            path: /health
            port: 80
          initialDelaySeconds: 30
          periodSeconds: 10
        livenessProbe:
          httpGet:
            path: /health
            port: 80
          initialDelaySeconds: 60
          periodSeconds: 30
---
apiVersion: v1
kind: Service
metadata:
  name: identity-api
  namespace: autoparts-production
spec:
  selector:
    app: identity-api
  ports:
    - port: 80
      targetPort: 80
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: catalog-api
  namespace: autoparts-production
  labels:
    app: catalog-api
    tier: api
spec:
  replicas: 3
  selector:
    matchLabels:
      app: catalog-api
  template:
    metadata:
      labels:
        app: catalog-api
        tier: api
    spec:
      containers:
      - name: catalog-api
        image: ghcr.io/autoparts/catalog:latest
        ports:
        - containerPort: 80
        env:
        - name: ASPNETCORE_URLS
          value: "http://+:80"
        - name: ConnectionStrings__DefaultConnection
          value: "Host=postgres;Database=CatalogDb;Username=postgres;Password=123456"
        - name: ServiceConfig__ServiceName
          value: "ProductCatalogApi"
        - name: ServiceConfig__ServiceId
          value: "catalog-api"
        - name: ServiceConfig__ServiceAddress
          value: "catalog-api"
        - name: ServiceConfig__ServicePort
          value: "80"
        - name: IdentityServer__Authority
          value: "http://identity-api"
        - name: IdentityServer__RequireHttpsMetadata
          value: "false"
        - name: RabbitMQ__ExchangeName
          value: "catalog_events"
        - name: ConnectionStrings__Redis
          value: "redis:6379"
        envFrom:
        - configMapRef:
            name: autoparts-config
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        readinessProbe:
          httpGet:
            path: /health
            port: 80
          initialDelaySeconds: 30
          periodSeconds: 10
        livenessProbe:
          httpGet:
            path: /health
            port: 80
          initialDelaySeconds: 60
          periodSeconds: 30
---
apiVersion: v1
kind: Service
metadata:
  name: catalog-api
  namespace: autoparts-production
spec:
  selector:
    app: catalog-api
  ports:
    - port: 80
      targetPort: 80
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: orders-api
  namespace: autoparts-production
  labels:
    app: orders-api
    tier: api
spec:
  replicas: 3
  selector:
    matchLabels:
      app: orders-api
  template:
    metadata:
      labels:
        app: orders-api
        tier: api
    spec:
      containers:
      - name: orders-api
        image: ghcr.io/autoparts/orders:latest
        ports:
        - containerPort: 80
        env:
        - name: ASPNETCORE_URLS
          value: "http://+:80"
        - name: ConnectionStrings__DefaultConnection
          value: "Host=postgres;Database=OrdersDb;Username=postgres;Password=123456"
        - name: ServiceConfig__ServiceName
          value: "OrderApi"
        - name: ServiceConfig__ServiceId
          value: "orders-api"
        - name: ServiceConfig__ServiceAddress
          value: "orders-api"
        - name: ServiceConfig__ServicePort
          value: "80"
        - name: IdentityServer__Authority
          value: "http://identity-api"
        - name: IdentityServer__RequireHttpsMetadata
          value: "false"
        - name: ExternalServices__CatalogApi
          value: "http://catalog-api"
        - name: RabbitMQ__ExchangeName
          value: "orders_events"
        - name: ConnectionStrings__Redis
          value: "redis:6379"
        envFrom:
        - configMapRef:
            name: autoparts-config
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        readinessProbe:
          httpGet:
            path: /health
            port: 80
          initialDelaySeconds: 30
          periodSeconds: 10
        livenessProbe:
          httpGet:
            path: /health
            port: 80
          initialDelaySeconds: 60
          periodSeconds: 30
---
apiVersion: v1
kind: Service
metadata:
  name: orders-api
  namespace: autoparts-production
spec:
  selector:
    app: orders-api
  ports:
    - port: 80
      targetPort: 80
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: api-gateway
  namespace: autoparts-production
  labels:
    app: api-gateway
    tier: gateway
spec:
  replicas: 2
  selector:
    matchLabels:
      app: api-gateway
  template:
    metadata:
      labels:
        app: api-gateway
        tier: gateway
    spec:
      containers:
      - name: api-gateway
        image: ghcr.io/autoparts/gateway:latest
        ports:
        - containerPort: 80
        env:
        - name: ASPNETCORE_URLS
          value: "http://+:80"
        - name: IdentityServer__Authority
          value: "http://identity-api"
        - name: IdentityServer__RequireHttpsMetadata
          value: "false"
        envFrom:
        - configMapRef:
            name: autoparts-config
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        readinessProbe:
          httpGet:
            path: /health
            port: 80
          initialDelaySeconds: 30
          periodSeconds: 10
        livenessProbe:
          httpGet:
            path: /health
            port: 80
          initialDelaySeconds: 60
          periodSeconds: 30
---
apiVersion: v1
kind: Service
metadata:
  name: api-gateway
  namespace: autoparts-production
spec:
  selector:
    app: api-gateway
  ports:
    - port: 80
      targetPort: 80
  type: LoadBalancer
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: autoparts-ingress
  namespace: autoparts-production
  annotations:
    kubernetes.io/ingress.class: "nginx"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
spec:
  tls:
  - hosts:
    - api.autoparts.com
    secretName: autoparts-tls
  rules:
  - host: api.autoparts.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: api-gateway
            port:
              number: 80
